# This file defined a development docker compose environment.
#
# Run the following to get started:
#
#   docker compose -f docker-compose.dev.yaml -p leaptable up --remove-orphans
#
# That will start up services in the foreground. Press CTRL+C to exit.
#
# If you changed DB init scripts, then you should also run:
#
#     docker compose down -v
#
# That'll delete the volumes. Otherwise e.g. PostgreSQL will skip initializing
# if a DB already exists.
#
# If you omit `-d`, it'll run them all in the foreground, then you can stop them
# with your usual Ctrl-C terminal command.
#
# Facts:
#
# * The SERVICE PORTS numbering start at 45432, 48080, 43000, 43001 etc. to avoid other
#   existing instances of databases.
#
# * The login credentials are, where possible, all "leaptable" to avoid unnecessary
#   mental overhead.

version: "3.6"
services:
  postgres:
    image: postgres
    restart: always
    env_file:
      - .env.local
    ports:
      - 45432:5432
    environment:
      POSTGRES_PASSWORD: "postgres"
      POSTGRES_USER: "postgres"
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "postgres", "-U", "postgres" ]
      timeout: 45s
      interval: 10s
      retries: 10
    volumes:
      - leap-data-postgresql:/var/lib/postgresql/data
      - ./docker/01-init.sh:/docker-entrypoint-initdb.d/01-init.sh
      - ./docker/init-meta-db.sql:/scripts/init-meta-db.sql

  redis:
    image: redis
    restart: always

  hasura:
    image: hasura/graphql-engine:v2.30.0
    restart: always
    env_file:
      - .env.local
    environment:
      # postgres database to store Hasura metadata
      HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://postgres:postgres@postgres:5432/$HASURA_GRAPHQL_DB_NAME
      ## enable the console served by server
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true" # set to "false" to disable console
      ## enable debugging mode. It is recommended to disable this in production
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      # Unauthorized roles
      HASURA_GRAPHQL_UNAUTHORIZED_ROLE: "anonymous"
    depends_on:
      - postgres
    ports:
      - 48080:8080

  api:
      image: leaptable/api:latest
      restart: always
      command: [ "uvicorn", "leaptable.server.main:app", "--host", "0.0.0.0"]
      env_file:
        - .env.local
      ports:
        - 43000:8000
      depends_on:
      - postgres
      - hasura

  init-workspace:
    image: ubuntu
    command: bash /02-init-workspace.sh
    env_file:
      - .env.local
    volumes:
        - ./docker/02-init-workspace.sh:/02-init-workspace.sh
    depends_on:
      - api

  app:
    image: leaptable/app:latest
    restart: always
    depends_on:
      - postgres
      - hasura
    env_file:
      - .env.local
    ports:
      - 43001:3000

  agent-browser:
    image: leaptable/engine:latest
    restart: always
    command: [ "python", "leaptable/agents/browser/main.py" ]
    depends_on:
      - redis
      - postgres
    env_file:
      - .env.local

  agent-serpapi:
    image: leaptable/engine:latest
    restart: always
    command: [ "python", "leaptable/agents/serp/main.py" ]
    depends_on:
      - redis
      - postgres
    env_file:
      - .env.local

  tool-browser:
    image: leaptable/engine:latest
    restart: always
    command: [ "python", "leaptable/tools/browser/main.py" ]
    depends_on:
      - redis
      - postgres
    env_file:
      - .env.local
    deploy:
      mode: replicated
      replicas: 3

  tool-serpapi:
    image: leaptable/engine:latest
    restart: always
    command: [ "python", "leaptable/tools/serp/main.py" ]
    depends_on:
      - redis
      - postgres
    env_file:
      - .env.local
    deploy:
      mode: replicated
      replicas: 3

volumes:
  leap-data-postgresql:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: /leap-data/postgresql