generator client {
  provider  = "prisma-client-py"
  interface = "sync"
}

datasource db {
  provider          = "postgresql"
  url               = env("NNEXT_META_DB_URL")
  shadowDatabaseUrl = env("NNEXT_META_DB_SHADOW_URL")
}

enum AgentType {
  REACT
  PLANSOLVE
  OPENAI
}

enum AgentMemoryAuthorType {
  HUMAN
  AI
}

enum DocumentType {
  TXT
  PDF
  CSV
  OPENAPI
  URL
  MARKDOWN
  FIRESTORE
  PSYCHIC
}

enum ToolType {
  BROWSER
  SEARCH
  WOLFRAM_ALPHA
  REPLICATE
  ZAPIER_NLA
  AGENT
  OPENAPI
}

model User {
    @@map("user")
    id         String       @id @default(cuid()) @db.VarChar(255)
    email      String       @unique @db.VarChar(255)
    password   String?      @db.VarChar(255)
    name       String?      @db.VarChar(255)
    createdAt  DateTime?    @default(now())
    updatedAt  DateTime?    @updatedAt
    deletedAt  DateTime?
    profile    Profile?
    Agent      Agent[]
    ApiToken   ApiToken[]
    Document   Document[]
    Prompt     Prompt[]
    Tool       Tool[]
    AgentTrace AgentTrace[]
    Tag        Tag[]
}

model Profile {
    @@map("profile")
    id       String @id @default(cuid()) @db.VarChar(255)
    userId   String @unique @db.VarChar(255)
    user     User   @relation(fields: [userId], references: [id])
    metadata Json?  @default("{}")
}

model Document {
    @@map("document")
    id            String          @id @default(cuid()) @db.VarChar(255)
    userId        String          @db.VarChar(255)
    user          User            @relation(fields: [userId], references: [id])
    type          DocumentType    @default(TXT)
    url           String?         @db.Text()
    name          String
    splitter      Json?
    createdAt     DateTime?       @default(now())
    updatedAt     DateTime?       @updatedAt
    index         Json?
    authorization Json?
    metadata      Json?
    Agent         Agent[]
    AgentDocument AgentDocument[]
}

model Agent {
    @@map("agent")
    id            String          @id @default(cuid()) @db.VarChar(255)
    userId        String          @db.VarChar(255)
    user          User            @relation(fields: [userId], references: [id])
    document      Document?       @relation(fields: [documentId], references: [id])
    documentId    String?         @db.VarChar(255)
    tool          Tool?           @relation(fields: [toolId], references: [id])
    toolId        String?         @db.VarChar(255)
    tags          Json?           @default("[]")
    prompt        Prompt?         @relation(fields: [promptId], references: [id])
    promptId      String?         @db.VarChar(255)
    name          String
    type          AgentType       @default(REACT)
    llm           Json            @default("{ \"provider\": \"openai-chat\", \"model\": \"gpt-3.5-turbo\" }")
    hasMemory     Boolean         @default(false)
    isPublic      Boolean         @default(false)
    AgentMemory   AgentMemory[]
    createdAt     DateTime?       @default(now())
    updatedAt     DateTime?       @updatedAt
    AgentTrace    AgentTrace[]
    AgentDocument AgentDocument[]
    AgentTool     AgentTool[]
}

model ApiToken {
    @@map("api_token")
    id          String @id @default(cuid()) @db.VarChar(255)
    userId      String @db.VarChar(255)
    user        User   @relation(fields: [userId], references: [id])
    description String @db.VarChar(255)
    token       String
}

model AgentMemory {
    @@map("agent_memory")
    id        String                @id @default(cuid()) @db.VarChar(255)
    agentId   String                @db.VarChar(255)
    agent     Agent                 @relation(fields: [agentId], references: [id], onDelete: Cascade)
    author    AgentMemoryAuthorType @default(HUMAN)
    message   String                @db.Text()
    createdAt DateTime?             @default(now())
    updatedAt DateTime?             @updatedAt
    deletedAt DateTime?
}

model AgentTrace {
    @@map("agent_trace")
    id        String    @id @default(cuid()) @db.VarChar(255)
    userId    String    @db.VarChar(255)
    user      User      @relation(fields: [userId], references: [id])
    agentId   String    @db.VarChar(255)
    data      Json
    agent     Agent     @relation(fields: [agentId], references: [id], onDelete: Cascade)
    createdAt DateTime? @default(now())
    updatedAt DateTime? @updatedAt
}

model Prompt {
    @@map("prompt")
    id              String    @id @default(cuid()) @db.VarChar(255)
    name            String
    template        String    @db.Text()
    input_variables Json
    userId          String    @db.VarChar(255)
    user            User      @relation(fields: [userId], references: [id])
    createdAt       DateTime? @default(now())
    updatedAt       DateTime? @updatedAt
    deletedAt       DateTime?
    Agent           Agent[]
}

model AgentDocument {
    @@map("agent_document")
    id         String    @id @default(cuid()) @db.VarChar(255)
    document   Document? @relation(fields: [documentId], references: [id])
    documentId String?   @db.VarChar(255)
    agentId    String    @db.VarChar(255)
    agent      Agent     @relation(fields: [agentId], references: [id], onDelete: Cascade)
    createdAt  DateTime? @default(now())
    updatedAt  DateTime? @updatedAt
    deletedAt  DateTime?
}

model Tag {
    @@map("tag")
    id        String    @id @default(cuid()) @db.VarChar(255)
    name      String
    color     String?   @default("#0e8a16")
    userId    String    @db.VarChar(255)
    user      User      @relation(fields: [userId], references: [id])
    createdAt DateTime? @default(now())
    updatedAt DateTime? @updatedAt
}

model Tool {
    @@map("tool")
    id          String      @id @default(cuid()) @db.VarChar(255)
    name        String
    description String?     @db.Text()
    type        ToolType?
    metadata    Json?
    userId      String      @db.VarChar(255)
    user        User        @relation(fields: [userId], references: [id])
    createdAt   DateTime?   @default(now())
    updatedAt   DateTime?   @updatedAt
    Agent       Agent[]
    AgentTool   AgentTool[]
}

model AgentTool {
    @@map("agent_tool")
    id        String    @id @default(cuid()) @db.VarChar(255)
    tool      Tool?     @relation(fields: [toolId], references: [id])
    toolId    String?   @db.VarChar(255)
    agentId   String    @db.VarChar(255)
    agent     Agent     @relation(fields: [agentId], references: [id], onDelete: Cascade)
    createdAt DateTime? @default(now())
    updatedAt DateTime? @updatedAt
    deletedAt DateTime?
}

model Job {
    @@map("job")
    id       String       @map("_id")   @id @default(uuid())   @db.Uuid
    cr       DateTime     @map("_cr")   @default(now())    @db.Timestamp(6)
    up       DateTime     @map("_up")   @default(now())    @db.Timestamp(6)
    dl       DateTime?    @map("_dl")   @db.Timestamp(6)
}
